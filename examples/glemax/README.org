#+TITLE: Glemax
#+AUTHOR: laluxx
#+DATE: 2024-10-06
#+OPTIONS: toc:2
#+PROPERTY: comments both
#+DESCRIPTION: A complete rewrite of Emacs in C and OpenGL, designed for extensibility with advanced text editing features.

* Glemax - A Complete Rewrite of Emacs in C and OpenGL

Glemax is a text editor built from scratch in C and OpenGL, aiming to replicate and improve upon the Emacs experience. While maintaining the core philosophy and features of Emacs, Glemax brings a modern twist with hardware-accelerated rendering, customizable themes, advanced scrolling, and a powerful window management system. Glemax is designed to be fully extensible with C, allowing developers to modify and extend its behavior at runtime without the need for a limited extension language.

** Features
- **OpenGL-based rendering engine (Lume)** for smooth graphics and hardware acceleration.
- **Emacs-like functionalities** including:
  - Kill ring.
  - Region management.
  - Incremental search (I-search).
  - Electric pair mode and rainbow mode.
  - Syntax highlighting with Tree-sitter.
  - Window management with horizontal and vertical splits.
  - Minibuffer for command execution and I-search.
  - Interactive text regions with full-face support.
  - Infinite scrolling and mouse input handling.
- **Advanced cursor behavior**:
  - Crystal cursor mode: Cursor color adapts to the surrounding syntax.
  - Blinking cursor with customizable intervals and blink duration.
  - Emacs-like cursor movement and scrolling (e.g., ~recenter()~ and ~recenter_top_bottom()~).
- **Buffer and window management**:
  - Per-window scrolling.
  - Per-window point (cursor) for multi-window editing.
  - Support for ~nextBuffer()~ and ~previousBuffer()~ to easily switch between buffers.
- **Extensibility with C**: Create your own C functions and call them at runtime to modify Glemaxâ€™s behavior directly.

** Screenshots
#+CAPTION: Example of the Glemax editor in action, showcasing syntax highlighting and window splits.
[[./screenshot.png]]

** Key Bindings
- =C-x C-f=: Find file.
- =C-x C-s=: Save file.
- =C-space=: Set the mark.
- =M-w=: Copy region to kill ring.
- =C-w=: Cut region to kill ring.
- =C-y=: Yank (paste) from the kill ring.
- =C-/= or =C-z=: Undo.

For a full list of key bindings, please see =keychords.h=.

** Installation

To install Glemax, you will need the following dependencies:

- FreeType for font rendering.
- Tree-sitter for syntax parsing.
- OpenGL and GLFW for graphics rendering and window management.

*** Build Instructions
Clone the repository and compile:

#+BEGIN_SRC shell
  git clone https://github.com/yourusername/glemax.git
  cd glemax
  make
  ./glemax
#+END_SRC

Make sure to adjust any font paths in the configuration files.

** Customization
Glemax is highly customizable. You can extend its functionality by writing C code directly. Some key files to check out:

- =edit.c=: Core text editing functions (e.g., ~delete_line()~, ~duplicate_line()~).
- =buffer.c=: Buffer management (e.g., ~switchToBuffer()~, ~setBufferContent()~).
- =completion.c=: Tab completion logic for commands.
- =syntax.c=: Syntax highlighting with Tree-sitter integration.
- =wm.c=: Window management functions for handling splits, scrolling, and resizing.

To add a new function to the editor, simply declare it in your C code, register it with the Glemax command system, and call it at runtime!

#+BEGIN_QUOTE
"Think of Glemax as Emacs for the modern era, with all the flexibility of C and the performance of OpenGL."
#+END_QUOTE

** TODO List
The following features are planned or under development:

- [ ] Add support for more advanced modes like ~iedit-mode~ and ~rainbow-delimiters-mode~.
- [ ] Improve scrolling and snapping interactions.
- [ ] Implement an undo system.
- [ ] Streamline ~drawRegion()~ and ~drawHighlight()~ for better performance.
- [ ] Add support for fringe elements on windows.
- [ ] Implement a modeline struct for each window.

** Known Issues
- Segfault when completing a non-existing match after a completion.
- ~kill_region()~ sometimes does not behave correctly if the cursor is near the end of the buffer.

Please report any issues or feature requests via GitHub issues.

** Contribution
We welcome contributions! If you're interested in contributing to Glemax, please follow these steps:

1. Fork the repository.
2. Create a new branch with your feature/fix.
3. Submit a pull request with a description of the changes.

** License
Glemax is licensed under the MIT License. See the =LICENSE= file for details.

